@page "/"
@using TelerikBlazorAppTestChart.Components.Common

<link rel="stylesheet" href="css/custom-telerik.css" />

<style>
    .cardnew {
        height: 800px;
    }
    /* Общие стили для WorkWindow */
    .workwindow-container {
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        border-radius: 5px;
        min-height: 250px;
    }

    .k-table-row {
        font-size: 10px;
        line-height: 10px;
    }

    .telerik-table {
        padding: 0px;
    }

    .k-grid-md td, .k-grid-md .k-table-td {
        padding-block: 0px !important;
        padding-inline: 0px !important;
    }

    .small-row-height .k-placeholder-line {
        display: none;
    }

    .small-row-height.k-grid td {
        margin: 0;
        padding: 0;
    }


    /* Стили для контейнера с таблицей */
    .table-container {
        height: 90vh;
        scrollbar-width: thin;
        overflow-y: auto; /* Включаем вертикальный скроллинг */
    }

    /* Стили для самой таблицы */
    .telerik-grid {
        width: 100%;
        height: 100%;
    }

    /* Стили для контента таблицы */
    .telerik-grid .k-grid-content {
        overflow-y: auto; /* Включаем вертикальный скроллинг в таблице */
    }

    /* Заголовок WorkWindow */
    .workwindow-container h3 {
        margin-top: 0;
        font-size: 18px;
        color: #333;
        font-weight: bold;
    }

    /* Стили для TileLayout (если нужно стилизовать плитки) */
    .telerik-tilelayout-item {
        min-width: 285px;
        min-height: 285px;
        margin-bottom: 15px;
    }

    .tile-content {
        background-color: #fff;
        border-radius: 5px;
    }

    .k-grid-footer {
        padding-inline-end: 0px !important;
    }

    .dxbl-chart-root .dxbl-chart {
        padding: 0px !important;
    }


    .k-grid-content {
        scrollbar-width: none;
    }

    .k-grid-header {
        padding-inline-end: 0px !important;
    }
    /* Дополнительные улучшения для внешнего вида */
    .telerik-grid .k-header {
        background-color: #f0f0f0;
        color: #333;
        text-align: center;
        font-weight: bold;
    }

    .telerik-grid .k-grid-header {
        border-bottom: 1px solid #ddd;
    }

    .telerik-grid .k-grid-table {
        border-spacing: 0;
        border-collapse: collapse;
    }

    .telerik-grid .k-grid-table td,
    .telerik-grid .k-grid-table th {
        text-align: center;
        border: 1px solid #ddd;
    }

    .k-card-body {
        padding: 0px;
        padding-block: 0 !important;
        padding-inline: 0 !important;
    }
    /*.k-tilelayout-item-header{
            display: none;
            }*/
    .k-grid-content {
        padding: 0px;
    }

    .k-tilelayout-item-body k-card-body {
        padding: 0px;
    }
    /* Убираем паддинги для всего TileLayout */
    .telerik-tilelayout {
        padding: 0;
    }

    .gridlayout-item {
        font-size: 1.2em;
        font-weight: 500;
        text-align: center;
        width: 100%;
        height: 800px;
        text-align: center;
        position: relative;
        z-index: 0;
        display: flex;
        align-items: start;
        justify-content: start;
    }

    .gridlayout-item:before {
        content: " ";
        position: absolute;
        z-index: -1;
        width: 100%;
        height: 100%;
        left: 0;
        top: 0;
        opacity: 0.4;
    }

    .gridlayout-header:before {
        background-color: var(--bs-red);
    }

    .gridlayout-content:before {
        background-color: var(--bs-yellow);
    }

    .gridlayout-left-side-bar:before {
        background-color: var(--bs-green);
    }

    .gridlayout-right-side-bar:before {
    }

    .gridlayout-footer:before {
        background-color: var(--bs-blue);
        opacity: 0.5;
    }

    .dxgrid {
        height: 100%;
    }


    .dxbl-grid {
        --dxbl-grid-font-size: 10px;
    }

    .chart {
        height: 90vh;
    }

    .cell-text {
        font-weight: 750 !important;
    }

    .highlighted-item {
        background-color: #edc6c6
    }

    .highlighted-item2 {
        background-color: #a0dbc6
    }

    .transparent-item {
        background-color: transparent
    }

    .card-body {
        padding: 0;
    }

    .removeOrder {
        z-index: 201;
        flex-shrink: 0;
        cursor: pointer;
        float: right;
    }

    .restVolume {
        display: flex;
    }

    .restVolumeSpan {
        flex-shrink: 1;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis
    }

    .grid-header {
        display: none;
    }

</style>

<TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@PlusSize">Plus</TelerikButton>
<TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@MinusSize">Minus</TelerikButton>

<TelerikGridLayout>
    @* <GridLayoutColumns>
        <Telerik.Blazor.Components.GridLayoutColumn Width="20%" />
        <Telerik.Blazor.Components.GridLayoutColumn Width="@gridsizestting" />
        <Telerik.Blazor.Components.GridLayoutColumn Width="33%" />
    </GridLayoutColumns>

    <GridLayoutRows>
        <Telerik.Blazor.Components.GridLayoutRow />
    </GridLayoutRows> *@

    <GridLayoutColumns>
        <TelerikSplitter Orientation="@SplitterOrientation.Horizontal" Class="splitter">
            <SplitterPanes>
                <SplitterPane Size="@PaneSizeClusters" Collapsible="false" Class="clusters-pane" SizeChanged="@SizeChangedHandlerClusters">
                </SplitterPane>

                <SplitterPane Size="@PaneSizeChart" Collapsible="false" Class="chart-pane" SizeChanged="@SizeChangedHandlerChart">
                    <TelerikCard Class="chart-wrapper" Height="@(ChartHeight + "px")">
                        <TelerikCard Class="chart-wrapper1" Width="@(ChartWrapperWidth + "px")">
                            <div>
                                <ChartComponent @ref="ChartSeriesComponent"></ChartComponent>
                            </div>
                        </TelerikCard>
                    </TelerikCard>
                </SplitterPane>

                <SplitterPane Size="@PaneSizeQuotes" Collapsible="false" Class="quotes-pane" SizeChanged="@SizeChangedHandlerQuotes">
                    <TickGrid></TickGrid>
                </SplitterPane>

                <SplitterPane Size="1px" Collapsible="false" Class="empty-pane">
                </SplitterPane>
            </SplitterPanes>
        </TelerikSplitter>
    </GridLayoutColumns>

</TelerikGridLayout>

@* <TelerikTileLayout Columns="4" Resizable="true" OnResize="@ResizeContent">
    <TileLayoutItems>
        <TileLayoutItem HeaderText="Clusters Panel" Id="ClustersPane">
            <Content>
                Clusters Panel
            </Content>
        </TileLayoutItem>
        <TileLayoutItem HeaderText="Chart Panel" Id="ChartPane">
            <Content>
                <ChartComponent @ref="ChartSeriesComponent">
                </ChartComponent>
            </Content>
        </TileLayoutItem>
        <TileLayoutItem HeaderText="Quotes Panel" Id="QuotesPane">
            <Content>
                <TickGrid></TickGrid>
            </Content>
        </TileLayoutItem>
        <TileLayoutItem HeaderText="Empty Panel" Id="EmptyPane">
            <Content>
                Empty Panel
            </Content>
        </TileLayoutItem>
    </TileLayoutItems>
</TelerikTileLayout> *@

@code{

    @inject IJSRuntime JSRuntime;

    string gridsizestting => gridsize.ToString() + "%";
    int gridsize = 47;

    private ChartComponent ChartSeriesComponent { get; set; }
    private string ChartOffset { get; set; } = "0px";
    private int ChartWrapperWidth { get; set; } = 0;
    private int ChartWidth { get; set; } = 0;
    private int ChartHeight { get; set; } = 0;

    public static System.Timers.Timer CreateTimerAndStart(Action method, int ms, bool repeat = true)
    {
        var timer = new System.Timers.Timer(ms) { AutoReset = repeat };
        timer.Elapsed += (s, e) =>
        {
            method?.Invoke();
        };
        timer.Start();
        return timer;
    }

    private void PlusSize(MouseEventArgs obj)
    {
        gridsize += 2;
        StateHasChanged();
    }

    private void MinusSize(MouseEventArgs obj)
    {
        gridsize -= 2;
        StateHasChanged();
    }

    #region Panels
    public string PaneSizeClusters { get; set; } = "33%";
    public string PaneSizeChart { get; set; } = "33%";
    public string PaneSizeQuotes { get; set; } = "";

    /// <summary>
    /// size changed event handler for clusters panel
    /// </summary>
    /// <param name="size">updated panel width</param>
    private void SizeChangedHandlerClusters(string size)
    {
        PaneSizeClusters = size;
    }

    /// <summary>
    /// size changed event handler for chart panel
    /// </summary>
    /// <param name="size">updated panel width</param>
    private void SizeChangedHandlerChart(string size)
    {
        PaneSizeChart = size;
        ChartSeriesComponent.OnChartSizeChanged(size);
    }

    /// <summary>
    /// size changed event handler for quotes panel
    /// </summary>
    /// <param name="size">updated panel width</param>
    private void SizeChangedHandlerQuotes(string size)
    {
        PaneSizeQuotes = size;
    }

    private class ChartSize
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            // Get the actual pixel size of the chart-pane
            var dimensionsParent = await JSRuntime.InvokeAsync<ChartSize>("getElementSize", ["splitter"]);
            var dimensionsChartPane = await JSRuntime.InvokeAsync<ChartSize>("getElementSize", ["chart-pane"]);
            var dimensionsChartWrapper1 = await JSRuntime.InvokeAsync<ChartSize>("getElementSize", ["chart-wrapper1"]);
            ChartWrapperWidth = dimensionsParent.Width;
            ChartWidth = dimensionsChartPane.Width;
            // ChartWidth = 1498;
            ChartHeight = dimensionsChartWrapper1.Height;

            // await JSRuntime.InvokeVoidAsync("setElementStyle", "chart-wrapper", 
            // $"width:{ChartWrapperWidth}px; margin-left:{ChartWidth - ChartWrapperWidth}px;");
            // await JSRuntime.InvokeVoidAsync("setElementStyle", "chart-wrapper1", $"width:{ChartWrapperWidth}px;");

            StateHasChanged();

            // await JSRuntime.InvokeVoidAsync("registerElementSizeChangeCallback", ["chart-pane"]);
            // await JSRuntime.InvokeVoidAsync("window.registerViewportChangeCallback", DotNetObjectReference.Create(this));
        }
    }
    #endregion

    // public int ViewportWidth { get; set; }
    // public int ViewportHeight { get; set; }

    // [JSInvokable]
    // public void OnResize(int width, int height)
    // {
    //     if (ViewportWidth == width && ViewportHeight == height) return;
    //     ViewportWidth = width;
    //     ViewportHeight = height;
    // }
}