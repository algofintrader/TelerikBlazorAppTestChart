@page "/"
@using TelerikBlazorAppTestChart.Components.Common

<link rel="stylesheet" href="css/custom-telerik.css" />

<style>
    .cardnew {
        height: 800px;
    }
    /* Общие стили для WorkWindow */
    .workwindow-container {
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        border-radius: 5px;
        min-height: 250px;
    }

    .k-table-row {
        font-size: 10px;
        line-height: 10px;
    }

    .telerik-table {
        padding: 0px;
    }

    .k-grid-md td, .k-grid-md .k-table-td {
        padding-block: 0px !important;
        padding-inline: 0px !important;
    }

    .small-row-height .k-placeholder-line {
        display: none;
    }

    .small-row-height.k-grid td {
        margin: 0;
        padding: 0;
    }


    /* Стили для контейнера с таблицей */
    .table-container {
        height: 90vh;
        scrollbar-width: thin;
        overflow-y: auto; /* Включаем вертикальный скроллинг */
    }

    /* Стили для самой таблицы */
    .telerik-grid {
        width: 100%;
        height: 100%;
    }

    /* Стили для контента таблицы */
    .telerik-grid .k-grid-content {
        overflow-y: auto; /* Включаем вертикальный скроллинг в таблице */
    }

    /* Заголовок WorkWindow */
    .workwindow-container h3 {
        margin-top: 0;
        font-size: 18px;
        color: #333;
        font-weight: bold;
    }

    /* Стили для TileLayout (если нужно стилизовать плитки) */
    .telerik-tilelayout-item {
        min-width: 285px;
        min-height: 285px;
        margin-bottom: 15px;
    }

    .tile-content {
        background-color: #fff;
        border-radius: 5px;
    }

    .k-grid-footer {
        padding-inline-end: 0px !important;
    }

    .dxbl-chart-root .dxbl-chart {
        padding: 0px !important;
    }


    .k-grid-content {
        scrollbar-width: none;
    }

    .k-grid-header {
        padding-inline-end: 0px !important;
    }
    /* Дополнительные улучшения для внешнего вида */
    .telerik-grid .k-header {
        background-color: #f0f0f0;
        color: #333;
        text-align: center;
        font-weight: bold;
    }

    .telerik-grid .k-grid-header {
        border-bottom: 1px solid #ddd;
    }

    .telerik-grid .k-grid-table {
        border-spacing: 0;
        border-collapse: collapse;
    }

    .telerik-grid .k-grid-table td,
    .telerik-grid .k-grid-table th {
        text-align: center;
        border: 1px solid #ddd;
    }

    .k-card-body {
        padding: 0px;
        padding-block: 0 !important;
        padding-inline: 0 !important;
    }
    /*.k-tilelayout-item-header{
            display: none;
            }*/
    .k-grid-content {
        padding: 0px;
    }

    .k-tilelayout-item-body k-card-body {
        padding: 0px;
    }
    /* Убираем паддинги для всего TileLayout */
    .telerik-tilelayout {
        padding: 0;
    }

    .gridlayout-item {
        font-size: 1.2em;
        font-weight: 500;
        text-align: center;
        width: 100%;
        height: 800px;
        text-align: center;
        position: relative;
        z-index: 0;
        display: flex;
        align-items: start;
        justify-content: start;
    }

    .gridlayout-item:before {
        content: " ";
        position: absolute;
        z-index: -1;
        width: 100%;
        height: 100%;
        left: 0;
        top: 0;
        opacity: 0.4;
    }

    .gridlayout-header:before {
        background-color: var(--bs-red);
    }

    .gridlayout-content:before {
        background-color: var(--bs-yellow);
    }

    .gridlayout-left-side-bar:before {
        background-color: var(--bs-green);
    }

    .gridlayout-right-side-bar:before {
    }

    .gridlayout-footer:before {
        background-color: var(--bs-blue);
        opacity: 0.5;
    }

    .dxgrid {
        height: 100%;
    }


    .dxbl-grid {
        --dxbl-grid-font-size: 10px;
    }

    .chart {
        height: 90vh;
    }

    .cell-text {
        font-weight: 750 !important;
    }

    .highlighted-item {
        background-color: #edc6c6
    }

    .highlighted-item2 {
        background-color: #a0dbc6
    }

    .transparent-item {
        background-color: transparent
    }

    .card-body {
        padding: 0;
    }

    .removeOrder {
        z-index: 201;
        flex-shrink: 0;
        cursor: pointer;
        float: right;
    }

    .restVolume {
        display: flex;
    }

    .restVolumeSpan {
        flex-shrink: 1;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis
    }

    .grid-header {
        display: none;
    }

</style>

<TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@PlusSize">Plus</TelerikButton>
<TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@MinusSize">Minus</TelerikButton>

<div id="main-splitter-container">
    <div class="main-split-pane" id="clusters-pane">
        <ClustersComponent @ref="ClustersComponent">
        </ClustersComponent>
    </div>
    <div class="main-split-pane" id="chart-pane">
        <TelerikStackLayout Class="chart-wrapper-wrapper" Height="@(ChartPaneHeight + "px")">
            <TelerikStackLayout Class="chart-wrapper" Width="@(ChartPaneFullWidth + "px")">
                <div>
                    <ChartComponent @ref="ChartComponent"></ChartComponent>
                </div>
            </TelerikStackLayout>
        </TelerikStackLayout>
    </div>
    <div class="main-split-pane" id="tick-pane">
        <TickGrid @ref="TickGridComponent"></TickGrid>
    </div>
</div>

@code{

    @inject IJSRuntime JSRuntime;

    string gridsizestting => gridsize.ToString() + "%";
    int gridsize = 47;

    private ClustersComponent ClustersComponent { get; set; }
    private ChartComponent ChartComponent { get; set; }
    private TickGrid TickGridComponent { get; set;  }

    private string ChartOffset { get; set; } = "0px";
    private int ChartPaneFullWidth { get; set; } = 0;
    private int ChartPaneWidth { get; set; } = 0;
    private int ChartPaneHeight { get; set; } = 0;

    private class ChartSize
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            // Get the actual pixel size of the chart-pane
            var dimensionsRoot = await JSRuntime.InvokeAsync<ChartSize>("getElementSizeById", ["main-splitter-container"]);
            var dimensionsChartPane = await JSRuntime.InvokeAsync<ChartSize>("getElementSizeById", ["chart-pane"]);
            var dimensionsChartWrapper = await JSRuntime.InvokeAsync<ChartSize>("getElementSizeByClass", ["chart-wrapper"]);
            ChartPaneFullWidth = dimensionsRoot.Width;
            ChartPaneWidth = dimensionsChartPane.Width;
            ChartPaneHeight = dimensionsChartWrapper.Height;

            StateHasChanged();
        }
    }

    public static System.Timers.Timer CreateTimerAndStart(Action method, int ms, bool repeat = true)
    {
        var timer = new System.Timers.Timer(ms) { AutoReset = repeat };
        timer.Elapsed += (s, e) =>
        {
            method?.Invoke();
        };
        timer.Start();
        return timer;
    }

    #region Chart adjustment
    private void PlusSize(MouseEventArgs obj)
    {
        gridsize += 2;
        StateHasChanged();
    }

    private void MinusSize(MouseEventArgs obj)
    {
        gridsize -= 2;
        StateHasChanged();
    }

    private void TurnOnOff()
    {
        ChartComponent.TurnOnOff();
    }
    private void GoUp()
    {
        ChartComponent.GoUp();
    }
    private void GoDown()
    {
        ChartComponent.GoDown();
    }
    private void ChangeScale()
    {
        ChartComponent.ChangeScale();
    }
    private void ChangeScale2()
    {
        ChartComponent.ChangeScale2();
    }
    #endregion
}