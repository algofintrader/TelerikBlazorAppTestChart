@using Telerik.DataSource.Extensions
@inject JsInteropService jsInteropService
@inject IJSRuntime JSRuntime
@using Toolbelt.Blazor.HotKeys2
@inject HotKeys HotKeys 

@*OnStateChanged="@OnStateChanged"
OnStateInit="@OnStateChanged"
OnRowRender="@RowRender"
*@

<TelerikGrid @ref="TicksGrid" 
    Id="@GridTableId"
    EnableLoaderContainer="true"
    OnStateChanged="@OnStateChanged"
    RowHeight="15"
    Height="80vh"
    Data="@Ticks"
    TItem="@ChartComponent.TradeApi"
    ScrollMode="@GridScrollMode.Virtual"
    Pageable="false"
    Sortable="false"
    PageSize="150">
    <GridColumns>
        <GridColumn Width="1fr" Field="@nameof(ChartComponent.TradeApi.Price)"  />
        <GridColumn Width="1fr" Field="@nameof(ChartComponent.TradeApi.Volume)" />
    </GridColumns>
</TelerikGrid>

<TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@Scroll">Scroll</TelerikButton>
<TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@ChangeScale">CnahgeScale</TelerikButton>

@code {

    private HotKeysContext? _hotKeysContext;

    public List<ChartComponent.TradeApi> Ticks { get; set; } = new();
    public TelerikGrid<ChartComponent.TradeApi> TicksGrid { get; set; }

    private void UpdateClastersGrid()
    {
        InvokeAsync(() =>
        {
            try
            {
                TicksGrid.Data = Ticks;
                TicksGrid?.Rebind();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }).GetAwaiter().GetResult();
    }

    int Scale = 1;
    Dictionary<decimal, int> IndexesQuotes = new Dictionary<decimal, int>();

    private async Task OnGridRead(GridReadEventArgs args)
    {
        var result = await Ticks.ToDataSourceResultAsync(args.Request);

        if (result != null && result.Data != null)
        {
            var r2 = result.Data as IEnumerable<ChartComponent.TradeApi>;

            if(r2.Count()>0)
                Console.WriteLine($"skip = {args.Request.Skip} price= {r2.First().Price} ");
        }

        args.Data = result.Data;
        args.Total = result.Total;

    }

    protected override bool ShouldRender()
    {
        if (_firstrender)
            return false;


        Console.WriteLine($"SHOULD  RENDER {DateTime.Now}");
        return base.ShouldRender();
    }

    private List<ChartComponent.TradeApi> BuildInitialQuotes(decimal bestbid)
    {
        try
        {
            int levels = 3000;

            //округление
            // var min = (bestbid * 0.7m);

            decimal agrregatedlevel = bestbid - bestbid % (1 * Scale);


            //previous
            // var min = bestbid - levels * secutityMain.PriceStep * Scale;
            // var realmin = min - min % secutityMain.PriceStep * Scale;
            // var max = bestbid + levels * secutityMain.PriceStep;
            // var realmax = max - max % secutityMain.PriceStep;

            //new
            var realmin = agrregatedlevel - levels * 1 * Scale;
            var realmax = agrregatedlevel + levels * 1 * Scale;


            int index = 0;

            List<ChartComponent.TradeApi> localTicks = new();

            // for (decimal i = realmin; i < realmax; i += secutityMain.PriceStep)
            // {
            // 	IndexesQuotes.TryAdd(i, index);
            // 	localQuotesBuild.Add(MarketDepthLevel.GetEmptyLevel(i));
            // 	//LocalQuotesBuild.Add(new MarketDepthLevel() { Ask = 1, Price = i, });
            // 	index++;
            // }

            if (Ticks == null)
                Ticks = new();
            else
                Ticks.Clear();

            IndexesQuotes.Clear();

            for (decimal i = realmax; i > realmin; i -= 1 * Scale)
            {
                IndexesQuotes.TryAdd(i, index);
                localTicks.Add(new ChartComponent.TradeApi(){Price = i,Volume = new Random().Next(1,20)});
                //LocalQuotesBuild.Add(new MarketDepthLevel() { Ask = 1, Price = i, });
                index++;
            }

            // Console.WriteLine($" RIH Created INITIAL EMPTY QUOTES SCALE {Scale}");

            //Quotes = localQuotesBuild;

            return localTicks;


            //пришлось засунуть местами плохо работает..
            //InvokeAsync(StateHasChanged);

            //QuotesGrid.Rebind();



        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;

        }

    }

    public async Task ScrollTo<T>(int index, TelerikGrid<T> _grid)
    {

        if (_grid != null)
        {
            var state = _grid.GetState();
            //TODO по хорошему надо выяснить сколько элементов показывается на экране...
            var scrollindex = index - 20;
            state.Skip = scrollindex;

            //TODO: Может выскочить ошибка
            Console.WriteLine($"Scrolling to {scrollindex} {typeof(T)}");
            await _grid.SetStateAsync(state);
        }

    }

    private string GridTableId { get; set; } = Guid.NewGuid().ToString();


    bool _firstrender = false;
    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            _firstrender = true;
            jsInteropService.OnScroll += OnScroll;
            await JSRuntime.InvokeVoidAsync("getScrollEvent", GridTableId);


            _hotKeysContext = this.HotKeys.CreateContext()
                .Add(Toolbelt.Blazor.HotKeys2.Code.A, FooBar, new() { Description = "do foo bar." });


            var timer = new System.Timers.Timer(200){AutoReset = true};
            timer.Elapsed += async (s, e) =>
            {
                BuildAll();
            };
            timer.Start();
        }

        base.OnAfterRender(firstRender);
    }

    private void FooBar() // 👈 This will be invoked when Ctrl+Shift+A typed.
    {
        ChangeScale(null);
    }


    bool busy = false;
    bool scrolled = false;
    private void BuildAll()
    {
        if(busy)
            return;

        busy = true;

        Ticks = BuildInitialQuotes(3000);
        //UpdateClastersGrid();

        //InvokeAsync(StateHasChanged);
        
        //InvokeAsync(StateHasChanged);
        UpdateClastersGrid();

        WindowsComponent.CreateTimerAndStart(() => 
        {

            if (!scrolled)
            {
                ScrollTo(3000, TicksGrid);
                scrolled = true;
                UpdateClastersGrid();
                busy = false;
            }

            GetStateAfterScroll();

            InvokeAsync(StateHasChanged);
        }, 500, false);


        busy = false;
    }

    private void OnScroll(string arg1, string arg2, string arg3, int arg4)
    {
    }

    private void Scroll()
    {
        ScrollTo(2000, TicksGrid);
    }

    bool scrolllog = true;

    public void GetStateAfterScroll()
    {
        // var state = TicksGrid.GetState();
        // int realindex = 6000 - (int)state.Skip;

      //  if (Ticks != null &&  Ticks.Count > (int)state.Skip && scrolllog)
       //     Console.WriteLine($"price 1 = {Ticks[(int)state.Skip].Price}");
    }


    // SCROLL 
    private void OnStateChanged(GridStateEventArgs<ChartComponent.TradeApi> gridState)
    {
       // int realindex = 6000 - (int)gridState.GridState.Skip;
        //int realindex = (int)gridState.GridState.Skip;

        if (Ticks != null && Ticks.Count > (int)gridState.GridState.Skip && scrolllog)
            Console.WriteLine($"ONSTATE price SCROLL = {Ticks[(int)gridState.GridState.Skip].Price}");


        // var skip = (int)TicksGrid.GetState().Skip;

        // if (Ticks != null && Ticks.Count > (int)skip && scrolllog)
        //     Console.WriteLine($"ONSTATE price SCROLL = {Ticks[(int)skip].Price}");
    }

    private void RowRender(GridRowRenderEventArgs row)
    {
       //  var skip= (int)TicksGrid.GetState().Skip;
       // //  var lowprice = (row.Item as ChartComponent.TradeApi).Price+150;

       // if (Ticks != null && Ticks.Count > skip)
       // {
       //      Console.WriteLine($"skip = {skip} skipprice{Ticks[skip].Price} ");
       //     // Console.WriteLine($"skip = {skip} skipprice{Ticks[skip].Price} Rendered {lowprice}");
       // }
    }

    private void ChangeScale(MouseEventArgs obj)
    {
        Scale +=1;
        BuildAll();
    }

}
