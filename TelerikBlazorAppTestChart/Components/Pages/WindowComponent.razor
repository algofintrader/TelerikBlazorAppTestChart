@using Telerik.DataSource.Extensions
@inject JsInteropService jsInteropService
@inject IJSRuntime JSRuntime
@using Toolbelt.Blazor.HotKeys2
@inject HotKeys HotKeys 

<TelerikGrid @ref="ParentGrid"
                Id="@GridId"
                EnableLoaderContainer="true"
                RowHeight="15"
                Height="80vh"
                Data="@GridData"
                TItem="@ChartComponent.TradeApi"
                ScrollMode="@GridScrollMode.Virtual"
                Pageable="false"
                Sortable="false"
                Resizable="true"
                PageSize="150">
    <GridColumns>
        <GridColumn Width="1fr" Field="@nameof(ChartComponent.TradeApi.Volume)" />
        <GridColumn Width="1fr" Field="@nameof(ChartComponent.TradeApi.Price)" />
        <GridColumn Width="1fr" Field="@nameof(ChartComponent.TradeApi.Volume)" />
        <GridColumn Width="1fr" Field="@nameof(ChartComponent.TradeApi.Price)" />
    </GridColumns>
</TelerikGrid>

@code {
    public TelerikGrid<ChartComponent.TradeApi> ParentGrid { get; set; }

    private string GridId { get; set; } = Guid.NewGuid().ToString();

    public List<ChartComponent.TradeApi> GridData { get; set; } = new();

    public string PaneSize1 { get; set; } = "0";
    public string PaneSize2 { get; set; } = "0";
    public string PaneSize3 { get; set; } = "0";
    public string PaneSize4 { get; set; } = "0";

    protected override void OnInitialized()
    {
        BuildInitialCluster(3000);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("registerElementsSizeChangeCallback", 
            [DotNetObjectReference.Create(this), new string[] { "splitter", "table-pane1", "table-pane2", "table-pane3" }]);
        }
    }

    [JSInvokable]
    public void OnElementResize(string className, double width, double height)
    {
        if (className == "splitter")
        {
            // TODO
        }
        else if (className == "table-pane1")
        {

        }
        else if (className == "table-pane2")
        {

        }
        else if (className == "table-pane3")
        {

        }
        Console.WriteLine($"class: {className} width: {width}");
    }

    private int Scale = 1;
    private void BuildInitialCluster(decimal bestbid)
    {
        try
        {
            for (var i = 0; i < 100; i++)
            {
                GridData.Add(new ChartComponent.TradeApi() { Price = i, Volume = new Random().Next(1, 2000) });
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
}
