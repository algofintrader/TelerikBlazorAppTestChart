@using System.Timers
@using Lock = System.Threading.Lock
@using TelerikBlazorAppTestChart.Components.Common

<TelerikChart @ref="Chart2" Transitions="false" RenderAs="@RenderingMode.Canvas" Width="100%">
    <ChartLegend Visible="false"></ChartLegend>
    <ChartPannable Enabled="true"></ChartPannable>
    <ChartSeriesItems>

        @*   <ChartSeries Type="ChartSeriesType.Line"
                     Data="@Ticks2"
                     Field="@nameof(TradeApi.Price)"
                     ColorField="@nameof(TradeApi.Color)"> *@

        <ChartSeries Type="ChartSeriesType.Bubble"
                     Data="@Ticks2"
                     YField="@nameof(TradeApi.Price)"
                     XField="@nameof(TradeApi.IndexForChart)"
                     SizeField="@nameof(TradeApi.Volume)"
                     ColorField="@nameof(TradeApi.Color)">
        </ChartSeries>

        <ChartSeries Type="ChartSeriesType.ScatterLine"
                     Data="@Ticks"
                     YField="@nameof(TradeApi.Price)"
                     XField="@nameof(TradeApi.IndexForChart)">

            <ChartSeriesMarkers Visible="false">
            </ChartSeriesMarkers>

            <ChartSeries Type="ChartSeriesType.Bubble"
                         Data="@Ticks"
                         AutoFit="false"
                         YField="@nameof(TradeApi.Price)"
                         XField="@nameof(TradeApi.IndexForChart)"
                         SizeField="@nameof(TradeApi.Volume)"
                         ColorField="@nameof(TradeApi.Color)">
                <ChartSeriesLabels Visible="true"
                                   Template="chartSeriesLabelTemplate"
                                   AriaTemplate="chartSeriesAriaTemplate" />
            </ChartSeries>

        </ChartSeries>

        @*      YField="@nameof(TradeApi.Price)"
        XField="@nameof(TradeApi.IndexForChart)
        SizeField="@nameof(TradeApi.Volume)"> *@

    </ChartSeriesItems>

    @*    <ChartValueAxes>
        <ChartValueAxis Min="0" Max="30" ></ChartValueAxis>
    </ChartValueAxes> *@

    <ChartXAxes>
        <ChartXAxis Max="@i" Min="@(i-MaxAmount)" Visible="false" MajorUnit="5">
        </ChartXAxis>
    </ChartXAxes>

    <ChartYAxes>
        <ChartYAxis Min="@minchart" Max="@maxchart" Visible="false">
        </ChartYAxis>
    </ChartYAxes>

</TelerikChart>

<script suppress-error="BL9992">
    function chartSeriesLabelTemplate(context) {
    return context.dataItem.Volume;
    }

</script>

@code {

    //TODO: 1) странное масштабирование на старте
    //TODO: 2) бага с исчезнование -> лицензия телерика

    private double BaseChartSize = 33; // Reference size for scaling

    private int BaseBubbleCount = Constants.DEFAULT_AMOUNT; // Base number of bubbles
    private int MaxAmount = Constants.DEFAULT_AMOUNT; // Dynamically updated

    private Timer _timer;

    public enum Side
    {
        /// <summary>
        /// buy
        /// купля
        /// </summary>
        Buy,

        /// <summary>
        /// sell
        /// продажа
        /// </summary>
        Sell,

        //пустое направление.
        Empty
    }

    public class TradeApi
    {
        public string SecurityName { get; set; }
        public string TransactionID { get; set; }
        public string SecurityId { get; set; }
        public DateTime Time { get; set; }
        public Side Side { get; set; }

        public double? Volume { get; set; }

        public decimal Price { get; set; }
        public int IndexForChart { get; set; }

        public string Color { get; set; }
        public double Transparency { get; set; }
    }

    public List<TradeApi> Ticks { get; set; }
    public List<TradeApi> Ticks2 { get; set; }

    public TelerikChart Chart2 { get; set; }
    double minchart { get; set; } = 0;
    double maxchart { get; set; } = 300;

    int i = 1;

    bool busy = false;

    List<TradeApi> AllTicks = new List<TradeApi>();

    protected override void OnInitialized()
    {
        _timer = new System.Timers.Timer(200);

        Ticks = new List<TradeApi>();

        Ticks2 = new();
        // Ticks2.Add(new TradeApi() { IndexForChart = 0, Volume = Constants.BASE_MAX_VOLUME, });

        _timer.Elapsed += (s, e) =>
        {

            // lock (locker)
            {
                // if (busy)
                // {
                //     Console.WriteLine($"busy {i}");
                //     return;
                // }

                // busy = true;

                i++;
                // if (i > 100)
                //     i = 100;

                var r = new Random().Next(0, 2);

                var tick = new TradeApi()
                {
                    IndexForChart = i,
                    Price = new Random().Next(20, 70),
                    SecurityId = "si-3.25",
                    Side = Side.Buy,
                    Time = DateTime.Now,
                    Volume = new Random().Next(1, Constants.MAX_VOLUME)
                };

                if (r == 0)
                    tick.Color = "red";
                else
                {
                    tick.Color = "green";
                }

                AllTicks.Add(tick);

                if (ONOFF)
                {
                    // Console.WriteLine($"index={tick.IndexForChart} | tick {tick.Price} ");
                    ProcessTick(tick);
                }

                busy = false;
            }
        };
        _timer.Start();

        base.OnInitialized();
    }

    public void ChangeScale()
    {
        MaxAmount = MaxAmount / 2;
        InvokeAsync(StateHasChanged);
    }

    public void ChangeScale2()
    {
        MaxAmount = MaxAmount * 2;
        InvokeAsync(StateHasChanged);
    }

    private void ProcessTick(TradeApi tick)
    {
        Ticks.Add(tick);

        if (Ticks.Count > MaxAmount)
        {
            // Ticks.RemoveAt(1);
            Ticks.RemoveRange(0, Ticks.Count - MaxAmount);
        }

        InvokeAsync(StateHasChanged); //.GetAwaiter().GetResult();
                                      //InvokeAsync(Chart2.Refresh);
    }

    object locker = new object();

    decimal higher = 0;
    decimal lowre = 0;


    int click1 = 0;
    public void GoUp()
    {
        click1++;

        minchart += 25;
        maxchart += 25;
        // lock (locker)
        // {


        //     foreach (var tick in Ticks)
        //     {
        //         tick.Price += 3;
        //     }
        // }

        // if(click1==1)
        // InvokeAsync(StateHasChanged);
        // else
        Chart2.Refresh();

    }

    public void GoDown()
    {
        click1++;

        minchart -= 25;
        maxchart -= 25;

        // if(click1==1)
        //
        // else
        Chart2.Refresh();

        // lock (locker)
        // {

        //     foreach (var tick in Ticks)
        //     {
        //         tick.Price -= 3;
        //     }
        // }
    }

    private void OnMouseWheel()
    {

    }

    bool ONOFF = true;
    public void TurnOnOff()
    {
        ONOFF = !ONOFF;

        var copylist = AllTicks.ToList();

        foreach (var trade in copylist)
        {
            Console.WriteLine($"index={trade.IndexForChart} | tick {trade.Price} ");
        }

        AllTicks.Clear();
    }

    private double? ChangeSize(TradeApi trade)
    {
        return 10;
    }

    public void OnChartSizeChanged(string size)
    {
        // Convert size to a numeric percentage (if size is given in %, remove the % symbol)
        if (size.EndsWith("%"))
        {
            size = size.Replace("%", "");
        }

        if (double.TryParse(size, out double newSize))
        {
            // Calculate new maxamount dynamically
            // MaxAmount = Math.Max(1, (int)(BaseBubbleCount * newSize / BaseChartSize));

            // InvokeAsync(StateHasChanged);

            Console.WriteLine($"Max amount: {MaxAmount}");
        }
    }
}
